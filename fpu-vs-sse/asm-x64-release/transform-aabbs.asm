; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?value@?$integral_constant@_K$0A@@std@@2_KB	; std::integral_constant<unsigned __int64,0>::value
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000000H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_K$0A@@std@@2_KB
CONST	SEGMENT
?value@?$integral_constant@_K$0A@@std@@2_KB DQ 0000000000000000H ; std::integral_constant<unsigned __int64,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000001H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
PUBLIC	?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z ; transformAABBs_FPU
PUBLIC	??$min@M@std@@YAAEBMAEBM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YAAEBMAEBM0@Z			; std::max<float>
PUBLIC	?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z ; transformAABBs_SSE_aos
PUBLIC	?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z ; transformAABBs_SSE_soa
PUBLIC	__real@7f7fffff
PUBLIC	__real@ff7fffff
PUBLIC	__xmm@000000007f7fffff7f7fffff7f7fffff
PUBLIC	__xmm@00000000ff7fffffff7fffffff7fffff
PUBLIC	__xmm@7f7fffff7f7fffff7f7fffff7f7fffff
PUBLIC	__xmm@ff7fffffff7fffffff7fffffff7fffff
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
piecewise_construct DB 01H DUP (?)
allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD imagerel $LN35
	DD	imagerel $LN35+37
	DD	imagerel $unwind$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD imagerel $LN35+37
	DD	imagerel $LN35+721
	DD	imagerel $chain$9$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD imagerel $LN35+721
	DD	imagerel $LN35+723
	DD	imagerel $chain$10$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD imagerel $LN25
	DD	imagerel $LN25+15
	DD	imagerel $unwind$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD imagerel $LN25+15
	DD	imagerel $LN25+285
	DD	imagerel $chain$3$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD imagerel $LN25+285
	DD	imagerel $LN25+290
	DD	imagerel $chain$4$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD imagerel $LN25+56
	DD	imagerel $LN25+667
	DD	imagerel $chain$13$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD imagerel $LN25+667
	DD	imagerel $LN25+682
	DD	imagerel $chain$14$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
pdata	ENDS
;	COMDAT __xmm@ff7fffffff7fffffff7fffffff7fffff
CONST	SEGMENT
__xmm@ff7fffffff7fffffff7fffffff7fffff DB 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH
	DB	07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
CONST	ENDS
;	COMDAT __xmm@7f7fffff7f7fffff7f7fffff7f7fffff
CONST	SEGMENT
__xmm@7f7fffff7f7fffff7f7fffff7f7fffff DB 0ffH, 0ffH, 07fH, 07fH, 0ffH, 0ffH
	DB	07fH, 07fH, 0ffH, 0ffH, 07fH, 07fH, 0ffH, 0ffH, 07fH, 07fH
CONST	ENDS
;	COMDAT __xmm@00000000ff7fffffff7fffffff7fffff
CONST	SEGMENT
__xmm@00000000ff7fffffff7fffffff7fffff DB 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH
	DB	07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000007f7fffff7f7fffff7f7fffff
CONST	SEGMENT
__xmm@000000007f7fffff7f7fffff7f7fffff DB 0ffH, 0ffH, 07fH, 07fH, 0ffH, 0ffH
	DB	07fH, 07fH, 0ffH, 0ffH, 07fH, 07fH, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD 01c4b21H
	DD	04f84bH
	DD	05e845H
	DD	06d83fH
	DD	07c839H
	DD	08b833H
	DD	09a82bH
	DD	0a9826H
	DD	0b8821H
	DD	0c781cH
	DD	0d6817H
	DD	01ce410H
	DD	024740cH
	DD	0235408H
	DD	0223404H
	DD	imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z DD 061101H
	DD	01d0111H
	DD	0d008f00aH
	DD	06004c006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+15
	DD	imagerel $unwind$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD 082121H
	DD	019821H
	DD	028810H
	DD	03780aH
	DD	046805H
	DD	imagerel $LN25
	DD	imagerel $LN25+15
	DD	imagerel $unwind$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+37
	DD	imagerel $unwind$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD 0144c21H
	DD	04f84cH
	DD	05e83dH
	DD	06d837H
	DD	07c831H
	DD	08b82cH
	DD	09a827H
	DD	0a9822H
	DD	0b880fH
	DD	0c780aH
	DD	0d6805H
	DD	imagerel $LN35
	DD	imagerel $LN35+37
	DD	imagerel $unwind$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z DD 032519H
	DD	01c0117H
	DD	0500cH
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
; Function compile flags: /Ogtpy
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
;	COMDAT ?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z
_TEXT	SEGMENT
tv719 = 0
tv692 = 16
tv690 = 32
tv689 = 48
n$ = 272
inBBs$ = 280
mats$ = 288
outBBs$ = 296
?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z PROC ; transformAABBs_SSE_soa, COMDAT

; 140  : {

$LN25:
	mov	r11, rsp
	push	rsi
	push	r12
	push	r13
	push	r15
	sub	rsp, 232				; 000000e8H

; 141  : 	// Do 4 BBs at a time
; 142  : 	int nSIMD = (n + 3) / 4;

	lea	eax, DWORD PTR [rcx+3]
	mov	rsi, rdx

; 143  : 	for (int i = 0; i < nSIMD; ++i)

	xor	r13d, r13d
	cdq
	mov	r12, r9
	mov	r15, r8
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movsxd	rcx, eax
	mov	QWORD PTR tv719[rsp], rcx
	test	eax, eax
	jle	$LN4@transformA

; 141  : 	// Do 4 BBs at a time
; 142  : 	int nSIMD = (n + 3) / 4;

	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+16], rbp
	mov	QWORD PTR [r11+24], rdi
	mov	QWORD PTR [r11-40], r14
	xor	ebp, ebp
	movaps	XMMWORD PTR [r11-56], xmm6
	movaps	XMMWORD PTR [r11-72], xmm7
	movaps	XMMWORD PTR [r11-88], xmm8
	movaps	XMMWORD PTR [r11-104], xmm9
	movaps	XMMWORD PTR [r11-120], xmm10
	movaps	XMMWORD PTR [r11-136], xmm11
	movaps	XMMWORD PTR [rsp+112], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movaps	XMMWORD PTR [rsp+64], xmm15
	npad	13
$LL6@transformA:

; 144  : 	{
; 145  : 		__m128 xMinsNew = { FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX };
; 146  : 		__m128 yMinsNew = { FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX };
; 147  : 		__m128 zMinsNew = { FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX };
; 148  : 		__m128 xMaxsNew = { -FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX };
; 149  : 		__m128 yMaxsNew = { -FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX };
; 150  : 		__m128 zMaxsNew = { -FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX };
; 151  : 
; 152  : 		for (int j = 0; j < 8; ++j)

	mov	rax, QWORD PTR [r15+32]
	mov	rcx, QWORD PTR [r15+40]
	movaps	xmm8, XMMWORD PTR __xmm@7f7fffff7f7fffff7f7fffff7f7fffff
	movaps	xmm11, XMMWORD PTR __xmm@ff7fffffff7fffffff7fffffff7fffff
	mov	rdx, QWORD PTR [r15+104]
	mov	r8, QWORD PTR [r15+48]
	movaps	xmm14, XMMWORD PTR [rax+rbp]
	movaps	xmm2, XMMWORD PTR [rcx+rbp]
	movaps	xmm9, xmm8
	mov	rax, QWORD PTR [r15]
	mov	rcx, QWORD PTR [r15+8]
	mov	r9, QWORD PTR [r15+16]
	movaps	xmm10, xmm8
	movaps	xmm12, xmm11
	movaps	xmm13, xmm11
	mov	r10, QWORD PTR [r15+80]
	mov	r11, QWORD PTR [r15+112]
	movsxd	rdi, r13d
	movaps	xmm15, XMMWORD PTR [rax+rbp]
	movaps	xmm4, XMMWORD PTR [rcx+rbp]
	movaps	XMMWORD PTR tv690[rsp], xmm2
	mov	rax, QWORD PTR [r15+64]
	mov	rcx, QWORD PTR [r15+72]
	xor	r14d, r14d
	movaps	XMMWORD PTR tv689[rsp], xmm4
	shl	rdi, 4
	movaps	xmm1, XMMWORD PTR [rax+rbp]
	mov	rax, QWORD PTR [r15+96]
	movaps	XMMWORD PTR tv692[rsp], xmm1
	npad	2
$LL3@transformA:

; 153  : 		{
; 154  : 			__m128 xsCorner = ((j & 1) != 0) ? inBBs.xMaxs[i] : inBBs.xMins[i];

	test	r14b, 1
	je	SHORT $LN9@transformA
	mov	rbx, QWORD PTR [rsi+24]
	jmp	SHORT $LN21@transformA
$LN9@transformA:
	mov	rbx, QWORD PTR [rsi]
$LN21@transformA:
	add	rbx, rdi
	movaps	xmm7, XMMWORD PTR [rbx]

; 155  : 			__m128 ysCorner = ((j & 2) != 0) ? inBBs.yMaxs[i] : inBBs.yMins[i];

	test	r14b, 2
	je	SHORT $LN11@transformA
	mov	rbx, QWORD PTR [rsi+32]
	jmp	SHORT $LN22@transformA
$LN11@transformA:
	mov	rbx, QWORD PTR [rsi+8]
$LN22@transformA:
	add	rbx, rdi
	movaps	xmm6, XMMWORD PTR [rbx]

; 156  : 			__m128 zsCorner = ((j & 4) != 0) ? inBBs.zMaxs[i] : inBBs.zMins[i];

	test	r14b, 4
	je	SHORT $LN13@transformA
	mov	rbx, QWORD PTR [rsi+40]
	jmp	SHORT $LN23@transformA
$LN13@transformA:
	mov	rbx, QWORD PTR [rsi+16]
$LN23@transformA:
	add	rbx, rdi

; 157  : 
; 158  : 			__m128 xsCornerTransformed = _mm_add_ps(
; 159  : 											_mm_add_ps(_mm_mul_ps(xsCorner, mats.comps[0][0][i]),
; 160  : 													   _mm_mul_ps(ysCorner, mats.comps[1][0][i])),
; 161  : 											_mm_add_ps(_mm_mul_ps(zsCorner, mats.comps[2][0][i]),
; 162  : 																			mats.comps[3][0][i]));
; 163  : 			__m128 ysCornerTransformed = _mm_add_ps(
; 164  : 											_mm_add_ps(_mm_mul_ps(xsCorner, mats.comps[0][1][i]),
; 165  : 													   _mm_mul_ps(ysCorner, mats.comps[1][1][i])),
; 166  : 											_mm_add_ps(_mm_mul_ps(zsCorner, mats.comps[2][1][i]),
; 167  : 																			mats.comps[3][1][i]));

	mulps	xmm4, xmm7
	movaps	xmm5, xmm15
	movaps	xmm3, XMMWORD PTR [rbx]
	movaps	xmm0, xmm14
	inc	r14d
	mulps	xmm0, xmm6
	mulps	xmm5, xmm7
	addps	xmm5, xmm0
	movaps	xmm0, xmm2

; 168  : 			__m128 zsCornerTransformed = _mm_add_ps(
; 169  : 											_mm_add_ps(_mm_mul_ps(xsCorner, mats.comps[0][2][i]),
; 170  : 													   _mm_mul_ps(ysCorner, mats.comps[1][2][i])),
; 171  : 											_mm_add_ps(_mm_mul_ps(zsCorner, mats.comps[2][2][i]),
; 172  : 																			mats.comps[3][2][i]));

	movaps	xmm2, XMMWORD PTR [r9+rbp]
	mulps	xmm1, xmm3
	mulps	xmm0, xmm6
	mulps	xmm2, xmm7
	addps	xmm1, XMMWORD PTR [rax+rbp]
	addps	xmm4, xmm0
	movaps	xmm0, XMMWORD PTR [r8+rbp]
	mulps	xmm0, xmm6
	addps	xmm5, xmm1
	movaps	xmm1, XMMWORD PTR [rcx+rbp]
	addps	xmm2, xmm0

; 173  : 
; 174  : 			xMinsNew = _mm_min_ps(xMinsNew, xsCornerTransformed);

	minps	xmm8, xmm5

; 175  : 			yMinsNew = _mm_min_ps(yMinsNew, ysCornerTransformed);
; 176  : 			zMinsNew = _mm_min_ps(zMinsNew, zsCornerTransformed);
; 177  : 			xMaxsNew = _mm_max_ps(xMaxsNew, xsCornerTransformed);

	maxps	xmm11, xmm5
	mulps	xmm1, xmm3
	addps	xmm1, XMMWORD PTR [rdx+rbp]
	addps	xmm4, xmm1
	movaps	xmm1, XMMWORD PTR [r10+rbp]
	minps	xmm9, xmm4

; 178  : 			yMaxsNew = _mm_max_ps(yMaxsNew, ysCornerTransformed);

	maxps	xmm12, xmm4
	mulps	xmm1, xmm3
	movaps	xmm4, XMMWORD PTR tv689[rsp]
	addps	xmm1, XMMWORD PTR [r11+rbp]
	addps	xmm2, xmm1
	movaps	xmm1, XMMWORD PTR tv692[rsp]
	minps	xmm10, xmm2

; 179  : 			zMaxsNew = _mm_max_ps(zMaxsNew, zsCornerTransformed);

	maxps	xmm13, xmm2
	movaps	xmm2, XMMWORD PTR tv690[rsp]
	cmp	r14d, 8
	jl	$LL3@transformA

; 180  : 		}
; 181  : 
; 182  : 		outBBs.xMins[i] = xMinsNew;

	mov	rax, QWORD PTR [r12]
	add	rbp, 16
	inc	r13d
	dec	QWORD PTR tv719[rsp]
	movaps	XMMWORD PTR [rax+rbp-16], xmm8

; 183  : 		outBBs.yMins[i] = yMinsNew;

	mov	rax, QWORD PTR [r12+8]
	movaps	XMMWORD PTR [rax+rbp-16], xmm9

; 184  : 		outBBs.zMins[i] = zMinsNew;

	mov	rax, QWORD PTR [r12+16]
	movaps	XMMWORD PTR [rax+rbp-16], xmm10

; 185  : 		outBBs.xMaxs[i] = xMaxsNew;

	mov	rax, QWORD PTR [r12+24]
	movaps	XMMWORD PTR [rax+rbp-16], xmm11

; 186  : 		outBBs.yMaxs[i] = yMaxsNew;

	mov	rax, QWORD PTR [r12+32]
	movaps	XMMWORD PTR [rax+rbp-16], xmm12

; 187  : 		outBBs.zMaxs[i] = zMaxsNew;

	mov	rax, QWORD PTR [r12+40]
	movaps	XMMWORD PTR [rax+rbp-16], xmm13
	jne	$LL6@transformA
	movaps	xmm15, XMMWORD PTR [rsp+64]
	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm13, XMMWORD PTR [rsp+96]
	mov	r14, QWORD PTR [rsp+224]
	mov	rdi, QWORD PTR [rsp+288]
	mov	rbp, QWORD PTR [rsp+280]
	mov	rbx, QWORD PTR [rsp+272]
	movaps	xmm12, XMMWORD PTR [rsp+112]
	movaps	xmm11, XMMWORD PTR [rsp+128]
	movaps	xmm10, XMMWORD PTR [rsp+144]
	movaps	xmm9, XMMWORD PTR [rsp+160]
	movaps	xmm8, XMMWORD PTR [rsp+176]
	movaps	xmm7, XMMWORD PTR [rsp+192]
	movaps	xmm6, XMMWORD PTR [rsp+208]
$LN4@transformA:

; 188  : 	}
; 189  : 
; 190  : 	(void)mats;
; 191  : }

	add	rsp, 232				; 000000e8H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	ret	0
?transformAABBs_SSE_soa@@YAXHUAABBs_soa@@Umats_soa@@0@Z ENDP ; transformAABBs_SSE_soa
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
;	COMDAT ?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z
_TEXT	SEGMENT
corner$1 = 0
n$ = 96
inBBs$ = 104
mats$ = 112
outBBs$ = 120
?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z PROC ; transformAABBs_SSE_aos, COMDAT

; 82   : {

$LN25:
	sub	rsp, 88					; 00000058H

; 83   : 	for (int i = 0; i < n; ++i)

	movsxd	r10, ecx
	test	ecx, ecx
	jle	$LN4@transformA
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	XMMWORD PTR [rsp+32], xmm8
	add	r8, 32					; 00000020H
	lea	rax, QWORD PTR [rdx+20]
	sub	r9, rdx
	movaps	XMMWORD PTR [rsp+16], xmm9
	xorps	xmm9, xmm9
	npad	12
$LL6@transformA:

; 84   : 	{
; 85   : 		__m128 newMins = { FLT_MAX, FLT_MAX, FLT_MAX };
; 86   : 		__m128 newMaxs = { -FLT_MAX, -FLT_MAX, -FLT_MAX };
; 87   : 		// Note: constructing the corners can be done more efficiently with shuffles,
; 88   : 		// but in a typical vector math lib, this is what you're likely to get
; 89   : 		for (int j = 0; j < 8; ++j)

	movaps	xmm3, XMMWORD PTR __xmm@000000007f7fffff7f7fffff7f7fffff
	movaps	xmm4, XMMWORD PTR __xmm@00000000ff7fffffff7fffffff7fffff
	movaps	xmm5, XMMWORD PTR [r8-32]
	xor	ecx, ecx
	movaps	xmm6, XMMWORD PTR [r8-16]
	movaps	xmm7, XMMWORD PTR [r8]
	movaps	xmm8, XMMWORD PTR [r8+16]
$LL3@transformA:

; 90   : 		{
; 91   : 			__m128 corner =
; 92   : 			{
; 93   : 				((j & 1) != 0) ? inBBs[i].maxs.m128_f32[0] : inBBs[i].mins.m128_f32[0],

	test	cl, 1
	je	SHORT $LN9@transformA
	movss	xmm0, DWORD PTR [rax-4]
	jmp	SHORT $LN21@transformA
$LN9@transformA:
	movss	xmm0, DWORD PTR [rax-20]
$LN21@transformA:
	movss	DWORD PTR corner$1[rsp], xmm0

; 94   : 				((j & 2) != 0) ? inBBs[i].maxs.m128_f32[1] : inBBs[i].mins.m128_f32[1],

	test	cl, 2
	je	SHORT $LN11@transformA
	movss	xmm0, DWORD PTR [rax]
	jmp	SHORT $LN22@transformA
$LN11@transformA:
	movss	xmm0, DWORD PTR [rax-16]
$LN22@transformA:
	movss	DWORD PTR corner$1[rsp+4], xmm0

; 95   : 				((j & 4) != 0) ? inBBs[i].maxs.m128_f32[2] : inBBs[i].mins.m128_f32[2],

	test	cl, 4
	je	SHORT $LN13@transformA
	movss	xmm0, DWORD PTR [rax+4]
	jmp	SHORT $LN23@transformA
$LN13@transformA:
	movss	xmm0, DWORD PTR [rax-12]
$LN23@transformA:
	movss	DWORD PTR corner$1[rsp+8], xmm0

; 96   : 			};

	xor	edx, edx
	inc	ecx
	mov	DWORD PTR corner$1[rsp+12], edx

; 97   : 			// Multiply by matrix
; 98   : 			__m128 cornerX = _mm_shuffle_ps(corner, corner, _MM_SHUFFLE(0,0,0,0));

	movaps	xmm1, XMMWORD PTR corner$1[rsp]
	movaps	xmm2, xmm1

; 99   : 			__m128 cornerY = _mm_shuffle_ps(corner, corner, _MM_SHUFFLE(1,1,1,1));

	movaps	xmm0, xmm1
	shufps	xmm2, xmm1, 0
	shufps	xmm0, xmm1, 85				; 00000055H

; 100  : 			__m128 cornerZ = _mm_shuffle_ps(corner, corner, _MM_SHUFFLE(2,2,2,2));

	shufps	xmm1, xmm1, 170				; 000000aaH

; 101  : 			__m128 cornerTransformed = _mm_setzero_ps();
; 102  : 			cornerTransformed = _mm_add_ps(cornerTransformed, _mm_mul_ps(cornerX, mats[i][0]));

	mulps	xmm2, xmm5

; 103  : 			cornerTransformed = _mm_add_ps(cornerTransformed, _mm_mul_ps(cornerY, mats[i][1]));

	mulps	xmm0, xmm6

; 104  : 			cornerTransformed = _mm_add_ps(cornerTransformed, _mm_mul_ps(cornerZ, mats[i][2]));

	mulps	xmm1, xmm7
	addps	xmm2, xmm9
	addps	xmm2, xmm0
	addps	xmm2, xmm1

; 105  : 			cornerTransformed = _mm_add_ps(cornerTransformed, mats[i][3]);

	addps	xmm2, xmm8

; 106  : 			newMins = _mm_min_ps(newMins, cornerTransformed);

	minps	xmm3, xmm2

; 107  : 			newMaxs = _mm_max_ps(newMaxs, cornerTransformed);

	maxps	xmm4, xmm2
	cmp	ecx, 8
	jl	$LL3@transformA

; 108  : 		}
; 109  : 		outBBs[i].mins = newMins;

	movaps	XMMWORD PTR [r9+rax-20], xmm3

; 110  : 		outBBs[i].maxs = newMaxs;

	movaps	XMMWORD PTR [r9+rax-4], xmm4
	add	rax, 32					; 00000020H
	add	r8, 64					; 00000040H
	dec	r10
	jne	$LL6@transformA
	movaps	xmm9, XMMWORD PTR [rsp+16]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm6, XMMWORD PTR [rsp+64]
$LN4@transformA:

; 111  : 
; 112  : 		// Here's an implementation with shuffles, for reference,
; 113  : 		// which is a great deal faster than the non-shuffle version
; 114  : 		// (but not as fast as SOA).
; 115  : /*
; 116  : 		// shuffle (xyzw, XYZW) to (xyXY, zwZW)
; 117  : 		__m128 xyXY = _mm_shuffle_ps(inBBs[i].mins, inBBs[i].maxs, _MM_SHUFFLE(1,0,1,0));
; 118  : 		__m128 zwZW = _mm_shuffle_ps(inBBs[i].mins, inBBs[i].maxs, _MM_SHUFFLE(3,2,3,2));
; 119  : 		// thence shuffle to (xyzw, Xyzw, xYzw, XYzw, xyZw, XyZw, xYZw, XYZw)
; 120  : 		__m128 corner[] = 
; 121  : 		{
; 122  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,0,1,0)),
; 123  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,0,1,2)),
; 124  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,0,3,0)),
; 125  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,0,3,2)),
; 126  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,2,1,0)),
; 127  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,2,1,2)),
; 128  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,2,3,0)),
; 129  : 			_mm_shuffle_ps(xyXY, zwZW, _MM_SHUFFLE(1,2,3,2)),
; 130  : 		};
; 131  : */
; 132  : 	}
; 133  : }

	add	rsp, 88					; 00000058H
	ret	0
?transformAABBs_SSE_aos@@YAXHPEBUAABB_aos@@QEAY03$$CBT__m128@@PEAU1@@Z ENDP ; transformAABBs_SSE_aos
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$max@M@std@@YAAEBMAEBM0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$max@M@std@@YAAEBMAEBM0@Z PROC			; std::max<float>, COMDAT

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	movss	xmm0, DWORD PTR [rdx]
	comiss	xmm0, DWORD PTR [rcx]
	cmova	rcx, rdx
	mov	rax, rcx

; 2033 : 	}

	ret	0
??$max@M@std@@YAAEBMAEBM0@Z ENDP			; std::max<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$min@M@std@@YAAEBMAEBM0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$min@M@std@@YAAEBMAEBM0@Z PROC			; std::min<float>, COMDAT

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rdx]
	cmova	rcx, rdx
	mov	rax, rcx

; 2051 : 	}

	ret	0
??$min@M@std@@YAAEBMAEBM0@Z ENDP			; std::min<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp
;	COMDAT ?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z
_TEXT	SEGMENT
cornerTransformed$1 = 0
newMins$2 = 16
newMaxs$3 = 32
__$ArrayPad$ = 48
n$ = 240
inBBs$ = 248
mats$ = 256
outBBs$ = 264
?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z PROC ; transformAABBs_FPU, COMDAT

; 43   : {

$LN35:

; 44   : 	for (int i = 0; i < n; ++i)

	test	ecx, ecx
	jle	$LN33@transformA
	mov	r11, rsp
	push	rbp
	lea	rbp, QWORD PTR [r11-95]
	sub	rsp, 224				; 000000e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-137], rax
	movaps	XMMWORD PTR [r11-24], xmm6
	movaps	XMMWORD PTR [r11-40], xmm7
	movaps	XMMWORD PTR [r11-56], xmm8
	movsxd	r10, ecx
	add	r8, 32					; 00000020H
	lea	rcx, QWORD PTR [rdx+16]
	sub	r9, rdx
	movaps	XMMWORD PTR [r11-72], xmm9
	movaps	XMMWORD PTR [r11-88], xmm10
	movaps	XMMWORD PTR [r11-104], xmm11
	movaps	XMMWORD PTR [r11-120], xmm12
	movaps	XMMWORD PTR [rsp+96], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm14
	movss	xmm14, DWORD PTR __real@7f7fffff
	movaps	XMMWORD PTR [rsp+64], xmm15
	movss	xmm15, DWORD PTR __real@ff7fffff
	npad	6
$LL6@transformA:

; 45   : 	{
; 46   : 		float newMins[] = { FLT_MAX, FLT_MAX, FLT_MAX };

	movaps	xmm8, xmm14
	movaps	xmm9, xmm14
	movaps	xmm10, xmm14

; 48   : 		for (int j = 0; j < 8; ++j)

	xor	edx, edx
	movss	DWORD PTR newMins$2[rbp-137], xmm8
	movss	DWORD PTR newMins$2[rbp-133], xmm9
	movss	DWORD PTR newMins$2[rbp-129], xmm10
	movaps	xmm11, xmm15
	movaps	xmm12, xmm15
	movaps	xmm13, xmm15
	movss	DWORD PTR newMaxs$3[rbp-137], xmm11
	movss	DWORD PTR newMaxs$3[rbp-133], xmm12
	movss	DWORD PTR newMaxs$3[rbp-129], xmm13
	npad	2
$LL3@transformA:

; 49   : 		{
; 50   : 			float corner[] =
; 51   : 			{
; 52   : 				((j & 1) != 0) ? inBBs[i].maxs[0] : inBBs[i].mins[0],

	test	dl, 1
	je	SHORT $LN9@transformA
	movss	xmm7, DWORD PTR [rcx-4]
	jmp	SHORT $LN10@transformA
$LN9@transformA:
	movss	xmm7, DWORD PTR [rcx-16]
$LN10@transformA:

; 53   : 				((j & 2) != 0) ? inBBs[i].maxs[1] : inBBs[i].mins[1],

	test	dl, 2
	je	SHORT $LN11@transformA
	movss	xmm6, DWORD PTR [rcx]
	jmp	SHORT $LN12@transformA
$LN11@transformA:
	movss	xmm6, DWORD PTR [rcx-12]
$LN12@transformA:

; 54   : 				((j & 4) != 0) ? inBBs[i].maxs[2] : inBBs[i].mins[2],

	test	dl, 4
	je	SHORT $LN13@transformA
	movss	xmm5, DWORD PTR [rcx+4]
	jmp	SHORT $LN14@transformA
$LN13@transformA:
	movss	xmm5, DWORD PTR [rcx-8]
$LN14@transformA:

; 58   : 				corner[0] * mats[i][0][0] + corner[1] * mats[i][1][0] + corner[2] * mats[i][2][0] + mats[i][3][0],

	movss	xmm0, DWORD PTR [r8-16]
	movss	xmm1, DWORD PTR [r8]
	movss	xmm4, DWORD PTR [r8-32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	lea	r11, QWORD PTR newMins$2[rbp-137]
	lea	rax, QWORD PTR cornerTransformed$1[rsp]
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 58   : 				corner[0] * mats[i][0][0] + corner[1] * mats[i][1][0] + corner[2] * mats[i][2][0] + mats[i][3][0],

	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	mulss	xmm4, xmm7

; 59   : 				corner[0] * mats[i][0][1] + corner[1] * mats[i][1][1] + corner[2] * mats[i][2][1] + mats[i][3][1],

	movss	xmm3, DWORD PTR [r8-28]

; 60   : 				corner[0] * mats[i][0][2] + corner[1] * mats[i][1][2] + corner[2] * mats[i][2][2] + mats[i][3][2],

	movss	xmm2, DWORD PTR [r8-24]
	addss	xmm4, xmm0
	mulss	xmm3, xmm7
	mulss	xmm2, xmm7
	movss	xmm0, DWORD PTR [r8-12]
	addss	xmm4, xmm1
	movss	xmm1, DWORD PTR [r8+4]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	addss	xmm4, DWORD PTR [r8+16]
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR [r8-8]
	mulss	xmm0, xmm6
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	comiss	xmm8, xmm4
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 58   : 				corner[0] * mats[i][0][0] + corner[1] * mats[i][1][0] + corner[2] * mats[i][2][0] + mats[i][3][0],

	movss	DWORD PTR cornerTransformed$1[rsp], xmm4

; 59   : 				corner[0] * mats[i][0][1] + corner[1] * mats[i][1][1] + corner[2] * mats[i][2][1] + mats[i][3][1],

	addss	xmm3, xmm1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	cmovbe	rax, r11
	lea	r11, QWORD PTR newMins$2[rbp-133]
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 59   : 				corner[0] * mats[i][0][1] + corner[1] * mats[i][1][1] + corner[2] * mats[i][2][1] + mats[i][3][1],

	addss	xmm3, DWORD PTR [r8+20]

; 60   : 				corner[0] * mats[i][0][2] + corner[1] * mats[i][1][2] + corner[2] * mats[i][2][2] + mats[i][3][2],

	movss	xmm1, DWORD PTR [r8+8]
	addss	xmm2, xmm0
	mulss	xmm1, xmm5
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	comiss	xmm9, xmm3
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 59   : 				corner[0] * mats[i][0][1] + corner[1] * mats[i][1][1] + corner[2] * mats[i][2][1] + mats[i][3][1],

	movss	DWORD PTR cornerTransformed$1[rsp+4], xmm3

; 60   : 				corner[0] * mats[i][0][2] + corner[1] * mats[i][1][2] + corner[2] * mats[i][2][2] + mats[i][3][2],

	addss	xmm2, xmm1
	addss	xmm2, DWORD PTR [r8+24]
	movss	DWORD PTR cornerTransformed$1[rsp+8], xmm2

; 62   : 			newMins[0] = min(newMins[0], cornerTransformed[0]);

	movss	xmm8, DWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	lea	rax, QWORD PTR cornerTransformed$1[rsp+4]
	cmovbe	rax, r11
	lea	r11, QWORD PTR newMins$2[rbp-129]
	comiss	xmm10, xmm2
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 62   : 			newMins[0] = min(newMins[0], cornerTransformed[0]);

	movss	DWORD PTR newMins$2[rbp-137], xmm8

; 63   : 			newMins[1] = min(newMins[1], cornerTransformed[1]);

	movss	xmm9, DWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	lea	rax, QWORD PTR cornerTransformed$1[rsp+8]
	cmovbe	rax, r11

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	lea	r11, QWORD PTR newMaxs$3[rbp-137]
	comiss	xmm4, xmm11
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 63   : 			newMins[1] = min(newMins[1], cornerTransformed[1]);

	movss	DWORD PTR newMins$2[rbp-133], xmm9

; 64   : 			newMins[2] = min(newMins[2], cornerTransformed[2]);

	movss	xmm10, DWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	lea	rax, QWORD PTR cornerTransformed$1[rsp]
	cmovbe	rax, r11
	lea	r11, QWORD PTR newMaxs$3[rbp-133]
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 65   : 			newMaxs[0] = max(newMaxs[0], cornerTransformed[0]);

	movss	xmm11, DWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	comiss	xmm3, xmm12
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 64   : 			newMins[2] = min(newMins[2], cornerTransformed[2]);

	movss	DWORD PTR newMins$2[rbp-129], xmm10
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	lea	rax, QWORD PTR cornerTransformed$1[rsp+4]
	cmovbe	rax, r11
	lea	r11, QWORD PTR newMaxs$3[rbp-129]
	comiss	xmm2, xmm13
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 65   : 			newMaxs[0] = max(newMaxs[0], cornerTransformed[0]);

	movss	DWORD PTR newMaxs$3[rbp-137], xmm11

; 66   : 			newMaxs[1] = max(newMaxs[1], cornerTransformed[1]);

	movss	xmm12, DWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	lea	rax, QWORD PTR cornerTransformed$1[rsp+8]
	cmovbe	rax, r11
; File c:\source\reed-util\fpu-vs-sse\transform-aabbs.cpp

; 48   : 		for (int j = 0; j < 8; ++j)

	inc	edx

; 66   : 			newMaxs[1] = max(newMaxs[1], cornerTransformed[1]);

	movss	DWORD PTR newMaxs$3[rbp-133], xmm12

; 67   : 			newMaxs[2] = max(newMaxs[2], cornerTransformed[2]);

	movss	xmm13, DWORD PTR [rax]
	movss	DWORD PTR newMaxs$3[rbp-129], xmm13
	cmp	edx, 8
	jl	$LL3@transformA

; 68   : 		}
; 69   : 		outBBs[i].mins[0] = newMins[0];

	movss	DWORD PTR [r9+rcx-16], xmm8

; 70   : 		outBBs[i].mins[1] = newMins[1];

	movss	DWORD PTR [r9+rcx-12], xmm9

; 71   : 		outBBs[i].mins[2] = newMins[2];

	movss	DWORD PTR [r9+rcx-8], xmm10
	add	r8, 64					; 00000040H

; 72   : 		outBBs[i].maxs[0] = newMaxs[0];

	movss	DWORD PTR [r9+rcx-4], xmm11

; 73   : 		outBBs[i].maxs[1] = newMaxs[1];

	movss	DWORD PTR [r9+rcx], xmm12

; 74   : 		outBBs[i].maxs[2] = newMaxs[2];

	movss	DWORD PTR [r9+rcx+4], xmm13
	add	rcx, 24
	dec	r10
	jne	$LL6@transformA
	movaps	xmm15, XMMWORD PTR [rsp+64]
	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm13, XMMWORD PTR [rsp+96]
	movaps	xmm12, XMMWORD PTR [rsp+112]
	movaps	xmm11, XMMWORD PTR [rsp+128]
	movaps	xmm10, XMMWORD PTR [rsp+144]
	movaps	xmm9, XMMWORD PTR [rsp+160]
	movaps	xmm8, XMMWORD PTR [rsp+176]
	movaps	xmm7, XMMWORD PTR [rsp+192]
	movaps	xmm6, XMMWORD PTR [rsp+208]

; 75   : 	}
; 76   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-137]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 224				; 000000e0H
	pop	rbp
$LN33@transformA:
	fatret	0
?transformAABBs_FPU@@YAXHPEBUAABB@@QEAY133$$CBMPEAU1@@Z ENDP ; transformAABBs_FPU
_TEXT	ENDS
END
