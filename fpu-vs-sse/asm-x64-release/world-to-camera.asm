; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z	; calcWorldToCamera_FPU
PUBLIC	?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z ; calcWorldToCamera_SSE_aos
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	cosf:PROC
EXTRN	memset:PROC
EXTRN	sinf:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z DD imagerel $LN12
	DD	imagerel $LN12+522
	DD	imagerel $unwind$?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z DD imagerel $LN12
	DD	imagerel $LN12+376
	DD	imagerel $unwind$?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z DD 0c2901H
	DD	049829H
	DD	05881dH
	DD	067817H
	DD	076812H
	DD	012340dH
	DD	07006f20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z DD 0194801H
	DD	02f848H
	DD	03e842H
	DD	04d83cH
	DD	05c836H
	DD	06b831H
	DD	07a82cH
	DD	089827H
	DD	09881cH
	DD	0a7817H
	DD	0b6813H
	DD	01a340fH
	DD	018010fH
	DD	07008H
xdata	ENDS
; Function compile flags: /Ogtpy
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
;	COMDAT ?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z
_TEXT	SEGMENT
vecView$ = 32
vecUp$ = 48
yaw$ = 144
pitch$ = 152
cameraPos$ = 160
outWorldToCamera$ = 168
?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z PROC ; calcWorldToCamera_SSE_aos, COMDAT

; 73   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rsp+112], xmm6
	movaps	XMMWORD PTR [rsp+96], xmm7
	movaps	XMMWORD PTR [rsp+80], xmm8
	mov	rdi, r9
	mov	rbx, r8
	movaps	XMMWORD PTR [rsp+64], xmm9
	movaps	xmm7, xmm1
	movaps	xmm6, xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 537  :         {return (sinf(_X)); }

	call	sinf
	movaps	xmm9, xmm0

; 511  :         {return (cosf(_X)); }

	movaps	xmm0, xmm6
	call	cosf
	movaps	xmm6, xmm0

; 537  :         {return (sinf(_X)); }

	movaps	xmm0, xmm7
	call	sinf
	movaps	xmm8, xmm0

; 511  :         {return (cosf(_X)); }

	movaps	xmm0, xmm7
	call	cosf
	xorps	xmm7, xmm7
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp

; 80   : 	__m128 vecView = { cosYaw * cosPitch, sinYaw * cosPitch, sinPitch };

	movss	DWORD PTR vecView$[rsp+8], xmm8
	xor	eax, eax
	mov	DWORD PTR vecView$[rsp+12], eax

; 81   : 	__m128 vecUp = { -cosYaw * sinPitch, -sinYaw * sinPitch, cosPitch };

	mov	DWORD PTR vecUp$[rsp+12], eax
	movaps	xmm1, xmm0
	movaps	xmm2, xmm0
	movss	DWORD PTR vecUp$[rsp+8], xmm0
	mulss	xmm1, xmm6
	mulss	xmm2, xmm9
	movss	DWORD PTR vecView$[rsp], xmm1
	movss	DWORD PTR vecView$[rsp+4], xmm2
	movaps	xmm1, xmm8
	mulss	xmm1, xmm6
	mulss	xmm8, xmm9

; 82   : 	__m128 vecViewShuffle120 = _mm_shuffle_ps(vecView, vecView, _MM_SHUFFLE(0,0,2,1));
; 83   : 	__m128 vecViewShuffle201 = _mm_shuffle_ps(vecView, vecView, _MM_SHUFFLE(0,1,0,2));
; 84   : 	__m128 vecUpShuffle120 = _mm_shuffle_ps(vecUp, vecUp, _MM_SHUFFLE(0,0,2,1));
; 85   : 	__m128 vecUpShuffle201 = _mm_shuffle_ps(vecUp, vecUp, _MM_SHUFFLE(0,1,0,2));
; 86   : 	__m128 vecLeft = _mm_sub_ps(_mm_mul_ps(vecUpShuffle120, vecViewShuffle201),
; 87   : 								_mm_mul_ps(vecUpShuffle201, vecViewShuffle120));
; 88   : 
; 89   : 	// Create matrix by assembling vectors as columns
; 90   : 	// (in SSE, easiest to do this by assembling as rows and then transposing)
; 91   : 	outWorldToCamera[0] = vecView;

	movaps	xmm6, XMMWORD PTR vecView$[rsp]
	movaps	xmm0, xmm6

; 92   : 	outWorldToCamera[1] = vecLeft;
; 93   : 	outWorldToCamera[2] = vecUp;
; 94   : 	outWorldToCamera[3] = _mm_setzero_ps();
; 95   : 	_MM_TRANSPOSE4_PS(outWorldToCamera[0], outWorldToCamera[1], outWorldToCamera[2], outWorldToCamera[3]);

	movaps	xmm4, xmm6
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm8, DWORD PTR __xmm@80000000800000008000000080000000
	shufps	xmm0, xmm6, 18
	movss	DWORD PTR vecUp$[rsp], xmm1
	movss	DWORD PTR vecUp$[rsp+4], xmm8
	movaps	xmm5, XMMWORD PTR vecUp$[rsp]
	movaps	xmm2, xmm5
	movaps	xmm1, xmm5
	shufps	xmm1, xmm5, 18
	shufps	xmm2, xmm5, 9
	mulps	xmm2, xmm0
	movaps	xmm0, xmm6
	shufps	xmm0, xmm6, 9
	mulps	xmm1, xmm0
	movaps	xmm0, xmm5
	shufps	xmm0, xmm7, 68				; 00000044H
	shufps	xmm5, xmm7, 238				; 000000eeH
	subps	xmm2, xmm1
	shufps	xmm4, xmm2, 68				; 00000044H
	shufps	xmm6, xmm2, 238				; 000000eeH
	movaps	xmm1, xmm4
	movaps	xmm3, xmm6
	shufps	xmm1, xmm0, 136				; 00000088H
	shufps	xmm4, xmm0, 221				; 000000ddH
	shufps	xmm3, xmm5, 136				; 00000088H
	movaps	XMMWORD PTR [rdi], xmm1
	movaps	XMMWORD PTR [rdi+32], xmm3
	movaps	XMMWORD PTR [rdi+16], xmm4
	shufps	xmm6, xmm5, 221				; 000000ddH
	movaps	XMMWORD PTR [rdi+48], xmm6

; 96   : 
; 97   : 	// Calculate inverse translation, -cameraPos * outWorldToCamera
; 98   : 	__m128 cameraPosX = _mm_shuffle_ps(cameraPos, cameraPos, _MM_SHUFFLE(0,0,0,0));

	movaps	xmm2, XMMWORD PTR [rbx]

; 99   : 	__m128 cameraPosY = _mm_shuffle_ps(cameraPos, cameraPos, _MM_SHUFFLE(1,1,1,1));
; 100  : 	__m128 cameraPosZ = _mm_shuffle_ps(cameraPos, cameraPos, _MM_SHUFFLE(2,2,2,2));
; 101  : 	__m128 invTranslation = _mm_setzero_ps();
; 102  : 	invTranslation = _mm_sub_ps(invTranslation, _mm_mul_ps(cameraPosX, outWorldToCamera[0]));
; 103  : 	invTranslation = _mm_sub_ps(invTranslation, _mm_mul_ps(cameraPosY, outWorldToCamera[1]));
; 104  : 	invTranslation = _mm_sub_ps(invTranslation, _mm_mul_ps(cameraPosZ, outWorldToCamera[2]));
; 105  : 
; 106  : 	// Stuff it in the matrix, with final component = 1.0
; 107  : 	outWorldToCamera[3] = invTranslation;
; 108  : 	outWorldToCamera[3].m128_f32[3] = 1.0f;
; 109  : }

	mov	rbx, QWORD PTR [rsp+144]
	movaps	xmm0, xmm2
	shufps	xmm0, xmm2, 0
	mulps	xmm0, xmm1
	movaps	xmm1, xmm2
	shufps	xmm1, xmm2, 85				; 00000055H
	shufps	xmm2, xmm2, 170				; 000000aaH
	subps	xmm7, xmm0
	mulps	xmm1, xmm4
	mulps	xmm2, xmm3
	subps	xmm7, xmm1
	subps	xmm7, xmm2
	movaps	XMMWORD PTR [rdi+48], xmm7
	mov	DWORD PTR [rdi+60], 1065353216		; 3f800000H
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	movaps	xmm8, XMMWORD PTR [rsp+80]
	movaps	xmm9, XMMWORD PTR [rsp+64]
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?calcWorldToCamera_SSE_aos@@YAXMMAEBT__m128@@QEAT1@@Z ENDP ; calcWorldToCamera_SSE_aos
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp
;	COMDAT ?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z
_TEXT	SEGMENT
yaw$ = 208
pitch$ = 216
cosPitch$1$ = 224
cameraPos$ = 224
outWorldToCamera$ = 232
?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z PROC		; calcWorldToCamera_FPU, COMDAT

; 35   : {

$LN12:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rdi
	sub	rsp, 192				; 000000c0H
	movaps	XMMWORD PTR [rax-24], xmm6
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	mov	rdi, r9
	mov	rbx, r8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+64], xmm13
	movaps	XMMWORD PTR [rsp+48], xmm14
	movaps	XMMWORD PTR [rsp+32], xmm15
	movaps	xmm7, xmm1
	movaps	xmm6, xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 537  :         {return (sinf(_X)); }

	call	sinf
	movaps	xmm8, xmm0

; 511  :         {return (cosf(_X)); }

	movaps	xmm0, xmm6
	call	cosf
	movaps	xmm6, xmm0

; 537  :         {return (sinf(_X)); }

	movaps	xmm0, xmm7
	call	sinf
	movaps	xmm12, xmm0

; 511  :         {return (cosf(_X)); }

	movaps	xmm0, xmm7
	call	cosf
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp

; 43   : 	float vecUp[3] = { -cosYaw * sinPitch, -sinYaw * sinPitch, cosPitch };

	movss	xmm15, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm13, xmm12

; 49   : 	};
; 50   : 
; 51   : 	// Create matrix by assembling vectors as columns
; 52   : 	memset(outWorldToCamera, 0, sizeof(float)*4*4);

	xor	edx, edx
	mov	rcx, rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 511  :         {return (cosf(_X)); }

	movaps	xmm7, xmm0
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp

; 42   : 	float vecView[3] = { cosYaw * cosPitch, sinYaw * cosPitch, sinPitch };

	movaps	xmm11, xmm0
	movaps	xmm10, xmm0

; 49   : 	};
; 50   : 
; 51   : 	// Create matrix by assembling vectors as columns
; 52   : 	memset(outWorldToCamera, 0, sizeof(float)*4*4);

	lea	r8d, QWORD PTR [rdx+64]
	mulss	xmm13, xmm8
	mulss	xmm10, xmm8
	mulss	xmm11, xmm6
	xorps	xmm13, xmm15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 511  :         {return (cosf(_X)); }

	movss	DWORD PTR cosPitch$1$[rsp], xmm7
; File c:\source\reed-util\fpu-vs-sse\world-to-camera.cpp

; 43   : 	float vecUp[3] = { -cosYaw * sinPitch, -sinYaw * sinPitch, cosPitch };

	movaps	xmm14, xmm12

; 44   : 	float vecLeft[3] =
; 45   : 	{
; 46   : 		vecUp[1]*vecView[2] - vecUp[2]*vecView[1],

	movaps	xmm9, xmm13
	movaps	xmm0, xmm10

; 47   : 		vecUp[2]*vecView[0] - vecUp[0]*vecView[2],

	movaps	xmm8, xmm11
	mulss	xmm0, xmm7
	mulss	xmm14, xmm6
	mulss	xmm9, xmm12
	subss	xmm9, xmm0
	xorps	xmm14, xmm15
	mulss	xmm8, xmm7
	movaps	xmm0, xmm14

; 48   : 		vecUp[0]*vecView[1] - vecUp[1]*vecView[0],

	movaps	xmm6, xmm14
	mulss	xmm0, xmm12
	mulss	xmm6, xmm10
	subss	xmm8, xmm0
	movaps	xmm0, xmm13
	mulss	xmm0, xmm11
	subss	xmm6, xmm0

; 49   : 	};
; 50   : 
; 51   : 	// Create matrix by assembling vectors as columns
; 52   : 	memset(outWorldToCamera, 0, sizeof(float)*4*4);

	call	memset

; 53   : 	outWorldToCamera[0][0] = vecView[0]; outWorldToCamera[1][0] = vecView[1]; outWorldToCamera[2][0] = vecView[2];

	movss	DWORD PTR [rdi], xmm11
	movss	DWORD PTR [rdi+16], xmm10
	movss	DWORD PTR [rdi+32], xmm12

; 54   : 	outWorldToCamera[0][1] = vecLeft[0]; outWorldToCamera[1][1] = vecLeft[1]; outWorldToCamera[2][1] = vecLeft[2];

	movss	DWORD PTR [rdi+4], xmm9
	movss	DWORD PTR [rdi+20], xmm8
	movss	DWORD PTR [rdi+36], xmm6

; 55   : 	outWorldToCamera[0][2] = vecUp[0];   outWorldToCamera[1][2] = vecUp[1];   outWorldToCamera[2][2] = vecUp[2];

	movss	DWORD PTR [rdi+8], xmm14
	movss	DWORD PTR [rdi+24], xmm13
	movss	DWORD PTR [rdi+40], xmm7

; 56   : 
; 57   : 	// Calculate inverse translation, -cameraPos * outWorldToCamera
; 58   : 	float invTranslation[] =
; 59   : 	{
; 60   : 		-(cameraPos[0] * outWorldToCamera[0][0] + cameraPos[1] * outWorldToCamera[1][0] + cameraPos[2] * outWorldToCamera[2][0]),

	movss	xmm3, DWORD PTR [rbx+4]
	movaps	xmm0, xmm3
	movss	xmm7, DWORD PTR [rbx]
	movss	xmm4, DWORD PTR [rbx+8]
	mulss	xmm0, xmm10
	movaps	xmm5, xmm7
	movaps	xmm1, xmm4

; 61   : 		-(cameraPos[0] * outWorldToCamera[0][1] + cameraPos[1] * outWorldToCamera[1][1] + cameraPos[2] * outWorldToCamera[2][1]),

	movaps	xmm2, xmm7
	mulss	xmm5, xmm11
	mulss	xmm1, xmm12
	mulss	xmm2, xmm9
	addss	xmm5, xmm0
	movaps	xmm0, xmm3
	addss	xmm5, xmm1
	xorps	xmm5, xmm15
	mulss	xmm0, xmm8

; 62   : 		-(cameraPos[0] * outWorldToCamera[0][2] + cameraPos[1] * outWorldToCamera[1][2] + cameraPos[2] * outWorldToCamera[2][2]),
; 63   : 	};
; 64   : 
; 65   : 	// Stuff it in the matrix, with final component = 1.0
; 66   : 	outWorldToCamera[3][0] = invTranslation[0];
; 67   : 	outWorldToCamera[3][1] = invTranslation[1];
; 68   : 	outWorldToCamera[3][2] = invTranslation[2];
; 69   : 	outWorldToCamera[3][3] = 1.0f;
; 70   : }

	lea	r11, QWORD PTR [rsp+192]
	mulss	xmm7, xmm14
	movaps	xmm14, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	mulss	xmm3, xmm13
	addss	xmm2, xmm0
	movss	DWORD PTR [rdi+48], xmm5
	mov	DWORD PTR [rdi+60], 1065353216		; 3f800000H
	mov	rbx, QWORD PTR [r11+16]
	addss	xmm7, xmm3
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	movaps	xmm1, xmm4
	mulss	xmm4, DWORD PTR cosPitch$1$[rsp]
	mulss	xmm1, xmm6
	movaps	xmm6, XMMWORD PTR [r11-16]
	addss	xmm7, xmm4
	xorps	xmm7, xmm15
	addss	xmm2, xmm1
	movss	DWORD PTR [rdi+56], xmm7
	movaps	xmm7, XMMWORD PTR [r11-32]
	xorps	xmm2, xmm15
	movaps	xmm15, XMMWORD PTR [rsp+32]
	movss	DWORD PTR [rdi+52], xmm2
	mov	rsp, r11
	pop	rdi
	ret	0
?calcWorldToCamera_FPU@@YAXMMQEBMQEAY03M@Z ENDP		; calcWorldToCamera_FPU
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_X$ = 8
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	jmp	sinf
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_X$ = 8
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	jmp	cosf
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
END
